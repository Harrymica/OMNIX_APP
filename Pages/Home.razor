@page "/home"
@using Telegram.Bot.Types.ReplyMarkups
@layout LayoutPage 
@inject ITelegramAuth telegramServ
@inject ILocalStorageService lStorage
@inject Tel_BotService botService
@inject HttpClient http
<PageTitle>Home</PageTitle>




<div class="page min-h-screen bg-gradient-to-br from-purple-600 to-blue-500 flex flex-col items-center justify-center p-0 sm:p-4 ">
    <div class="w-full h-full sm:h-auto sm:max-w-md bg-white bg-opacity-10 backdrop-blur-lg sm:rounded-2xl shadow-lg p-6 space-y-8 flex flex-col justify-between">
        <div>
            <h1 class="text-3xl font-bold text-center text-white mb-8">@FullName</h1>
            <Countdown />
        </div>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-auto">
            @* Airdrop Info *@
            <div class=" bg-opacity-20 rounded-lg p-4 text-black h-full" style="background-color:#8990f5">
                <h2 class="text-xl font-semibold mb-2">Your Airdrop</h2>
                <p class="text-sm" >
                    You've mined <span class="font-bold text-yellow-300">1000 TLG</span> tokens in this airdrop!
                </p>
            </div>

            @* Points Display *@
            <div class=" bg-opacity-20 rounded-lg p-4 text-black h-full" style="background-color:#8990f5">
                <h2 class="text-xl font-semibold mb-2">Your Points</h2>
                <div class="text-3xl font-bold text-yellow-300">5,250</div>
                <p class="text-sm mt-1">Keep engaging to earn more points!</p>
            </div>
        </div>
    </div>
</div>

@* <div class="container">
    <h1 class="title">Phoenix  @_userId</h1>
    
    <div class="logo-container">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="phoenix-logo">
            <path d="M12 2L2 12h3l7-7 7 7h3L12 2z" />
            <path d="M12 22v-8" />
            <path d="M12 14l-2.5 2.5" />
            <path d="M12 14l2.5 2.5" />
            <path class="animated-path" d="M12 14v4" />
        </svg>
    </div>

    <div class="grid">
        <MiningStatus />
        <Rewards />
    </div>
</div>
 *@

@* 
<div class="container" style="color:darkslateblue">

    <div class="flex flex-col h-screen bg-background text-foreground" >
        <main class="flex-1 flex flex-col items-center justify-center gap-8 px-6 py-12" style="color:white">
            <div class="flex flex-col items-center gap-2">
                <h1 class="text-3xl font-bold">Airdrop Claim</h1>
                <p class="text-muted-foreground">Claim your free tokens every 6 hours</p>
            </div>
            <div class="bg-card rounded-lg p-6 w-full max-w-md flex flex-col items-center gap-4">
                <div class="bg-muted rounded-full w-20 h-20 flex items-center justify-center text-4xl">
                   
                   
                    <div class="loader">
                        
                        <span>  @_firstName  </span>
                    </div>
                  
                </div>
                <div class="text-4xl font-bol text-center">
                    1,235 <span class="text-muted-foreground text-2xl">TOKENS</span>
                </div>

                <a href="/index">

                    <button type="submit" @onclick="Submit"
                            style="background-color:#C27406; width:120px  padding: 50px 50px"
                            class="w-120 h-120 rounded-full inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 text-primary-foreground h-11 rounded-md px-8 w-full bg-[#111325] hover:bg-[#111325]/90">
                    The OMNIX 200
                </button>
                </a>

               <div class="text-muted-foreground text-sm ">
                    Next airdrop in <span class="font-medium">@*  @NewTimeLeft.ToString("hh\\:mm\\:ss")  </span>
                </div>
            </div>
           
           
        </main>
       
    </div>
</div> *@
@* <img src="/images/dakcoin.jpg" /> *@




@code{
    private string _username;
    private string Storedusername;
    private string FullName;

    private string _userId;
    private string _firstName;


    private TelegramUser _user = new TelegramUser();
    private TelegramBotClient _bot = new TelegramBotClient("7324366764:AAE0FiQdBDSnHgZvnv2ZU3f5f9DAiGIMhx8");


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartReceivingUpdates();

            var userId = await lStorage.GetItemAsStringAsync("telegramId");
            if (!string.IsNullOrWhiteSpace(userId))
            {

                var result = await telegramServ.GetUser(userId);
                if (result != null)
                {
                    FullName = $"{result.FirstName}, {result.LastName}";
                    _username = $"{result.Username}";
                    _userId = result.TelegramId;
                    StateHasChanged();
                }

            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        TelegramUser ddd = new TelegramUser
            {
                //Id = Guid.NewGuid(),
                TelegramId = "343534343",
                Username = "Dubem",
                FirstName = "Garya",
                LastName = "Hemry",
                DateOfRegistration = DateTime.UtcNow
            };
        await telegramServ.SignUpUser(ddd);
        /*using var cts = new CancellationTokenSource();
        var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = new UpdateType[]
                        {
                    UpdateType.Message,
                    UpdateType.EditedMessage,
                        }
            };*/
        //await StartReceivingUpdates();
    }

    private async Task StartReceivingUpdates()
    {
        using var cts = new CancellationTokenSource();
        var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = new UpdateType[]
                {
                UpdateType.Message,
                UpdateType.EditedMessage,
                }
            };
       

        // Start receiving updates
        _bot.StartReceiving(UpdataeHandler, ErrorHandler, receiverOptions, cancellationToken: cts.Token);
    }

    private async Task ErrorHandler(ITelegramBotClient client, Exception exception, CancellationToken token)
    {

    }

    private async Task UpdataeHandler(ITelegramBotClient client, Update update, CancellationToken token)
    {
        if (update.Type == UpdateType.Message)
        {
            if (update.Message.Type == MessageType.Text)
            {

                var text = update.Message.Text;
                var chatid = update.Message.Chat.Id;
                var Username = update.Message.From.Username;//Chat.Username;
                _firstName = update.Message.From.FirstName;
                var lastName = update.Message.Chat.LastName;
                var getId = update.Message.From.Id;


                TelegramUser users = new TelegramUser
                    {
                        //Id = (long)Guid.NewGuid().GetHashCode(),
                        TelegramId = getId.ToString(),
                        Username = Username,
                        FirstName = _firstName,
                        LastName = lastName
                    };
                await lStorage.SetItemAsStringAsync(getId.ToString(), "telegramId");

                if (text.Equals("/start", StringComparison.OrdinalIgnoreCase))
                {
                    // Create an inline keyboard button that redirects to your website
                    var inlineKeyboard = new InlineKeyboardMarkup(new[]
                    {
                    InlineKeyboardButton.WithUrl("Visit Our Website", "https://omnix-app.onrender.com/")
                });

                    await _bot.SendTextMessageAsync(
                        chatId: chatid,
                        text: $"Welcome! Click the button below to start mining, {_firstName}",
                        replyMarkup: inlineKeyboard,
                        cancellationToken: token);
                }
                else
                {
                    // Reply back to the user with their message prefixed
                    await _bot.SendTextMessageAsync(
                        chatId: chatid,
                        text: $"This is what you said: {text}",
                        cancellationToken: token);
                }
                Console.WriteLine($"{Username} |{chatid} | {text}, {_firstName}");
                await telegramServ.SignUpUser(users);
                StateHasChanged();




            }
        }
    }


    public async Task Submit()
    {
        //await http.PostAsync("https://localhost:7074", );

        // Create an instance of Update with the necessary data
        var update = new Update
            {
                // Populate the Update object as needed
                // For example:
                Message = new Message
                {
                    Text = "/start",
                    Chat = new Chat
                    {
                        Id = 12345678 // Replace with actual chat ID
                    }
                }
            };

            var serilize = JsonConvert.SerializeObject(update);
        // Send the POST request to your API
        var response = await http.PostAsJsonAsync("https://localhost:7074/api/bot/", serilize);
    }

}
