@page "/"
@using Telegram.Bot.Types.ReplyMarkups
@layout LayoutPage 
@inject ITelegramAuth telegramServ
@inject ILocalStorageService lStorage
@inject Tel_BotService botService
@inject HttpClient http
<PageTitle>Home</PageTitle>



<div class="container" style="color:darkslateblue">

    <div class="flex flex-col h-screen bg-background text-foreground" >
        <main class="flex-1 flex flex-col items-center justify-center gap-8 px-6 py-12" style="color:white">
            <div class="flex flex-col items-center gap-2">
                <h1 class="text-3xl font-bold">Airdrop Claim</h1>
                <p class="text-muted-foreground">Claim your free tokens every 6 hours</p>
            </div>
            <div class="bg-card rounded-lg p-6 w-full max-w-md flex flex-col items-center gap-4">
                <div class="bg-muted rounded-full w-20 h-20 flex items-center justify-center text-4xl">
                   @* <img src="/images/dakcoin.jpg" /> *@
                   
                    <div class="loader">
                        
                        <span>  @_firstName  </span>
                    </div>
                  @*
                    @_username, @FullName
                    
                  *@

                   @*  @_user.FirstName 🪙 *@
                </div>
                <div class="text-4xl font-bol text-center">
                    1,235 <span class="text-muted-foreground text-2xl">TOKENS</span>
                </div>

                <a href="/index">

                    <button type="submit" @onclick="Submit"
                            style="background-color:#C27406; width:120px  padding: 50px 50px"
                            class="w-120 h-120 rounded-full inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 text-primary-foreground h-11 rounded-md px-8 w-full bg-[#111325] hover:bg-[#111325]/90">
                    The OMNIX 200
                </button>
                </a>

               <div class="text-muted-foreground text-sm ">
                    Next airdrop in <span class="font-medium">@*  @NewTimeLeft.ToString("hh\\:mm\\:ss") *@ </span>
                </div>
            </div>
           
           
        </main>
       
    </div>
</div>




@code{
    private string _username;
    private string Storedusername;
    private string FullName;

    private long _userId;
    private string _firstName;


    private TelegramUser _user = new TelegramUser();
    private TelegramBotClient _bot = new TelegramBotClient("7324366764:AAE0FiQdBDSnHgZvnv2ZU3f5f9DAiGIMhx8");


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Storedusername = await lStorage.GetItemAsStringAsync("username");
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var cts = new CancellationTokenSource();
        var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = new UpdateType[]
                        {
                    UpdateType.Message,
                    UpdateType.EditedMessage,
                        }
            };


        //var userId = await lStorage.GetItemAsStringAsync("userId");
        /* if (!string.IsNullOrWhiteSpace(Storedusername))
        {

        var result = await telegramServ.GetUser(userId);
            if (result != null)
            {
            FullName = $"{result.FirstName}, {result.LastName}";
            _username = $"{result.username}";
        StateHasChanged();
        }
        else
        {
        _bot.StartReceiving(UpdataeHandler, ErrorHandler, receiverOptions, cancellationToken: cts.Token);
    }
    }
    else
    {

    _bot.StartReceiving(UpdataeHandler, ErrorHandler, receiverOptions, cancellationToken: cts.Token);
        } */
        //_bot.StartReceiving(UpdataeHandler, ErrorHandler, receiverOptions, cancellationToken: cts.Token);

        // var me = await _bot.GetMeAsync();

        // Console.WriteLine($"Start listening for @{me.Username}, {_firstName}");
        //  Console.ReadLine();

        //cts.Cancel();
        // Start the bot in a separate task
        // _ = Task.Run(() => StartReceivingUpdates());




    }

    private async Task StartReceivingUpdates()
    {
        using var cts = new CancellationTokenSource();
        var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = new UpdateType[]
                {
                UpdateType.Message,
                UpdateType.EditedMessage,
                }
            };
        //await _bot.SetWebhook("https://omnix-app.onrender.com/api/bot/start");
        // await _bot.SetWebhook("https://omnix-app.onrender.com/", allowedUpdates: new UpdateType[]
        //         {
        //         UpdateType.Message,
        //         UpdateType.EditedMessage,
        //         });

        // Start receiving updates
        _bot.StartReceiving(UpdataeHandler, ErrorHandler, receiverOptions, cancellationToken: cts.Token);
    }

    private async Task ErrorHandler(ITelegramBotClient client, Exception exception, CancellationToken token)
    {

    }

    private async Task UpdataeHandler(ITelegramBotClient client, Update update, CancellationToken token)
    {
        if (update.Type == UpdateType.Message)
        {
            if (update.Message.Type == MessageType.Text)
            {

                var text = update.Message.Text;
                var chatid = update.Message.Chat.Id;
                var Username = update.Message.From.Username;//Chat.Username;
                _firstName = update.Message.From.FirstName;
                var lastName = update.Message.Chat.LastName;
                var getId = update.Message.From.Id;


                TelegramUser users = new TelegramUser
                    {
                        Id = (long)Guid.NewGuid().GetHashCode(),
                        TelegramId = getId.ToString(),
                        Username = Username,
                        FirstName = _firstName,
                        LastName = lastName
                    };

                if (text.Equals("/start", StringComparison.OrdinalIgnoreCase))
                {
                    // Create an inline keyboard button that redirects to your website
                    var inlineKeyboard = new InlineKeyboardMarkup(new[]
                    {
                    InlineKeyboardButton.WithUrl("Visit Our Website", "https://omnix-app.onrender.com/")
                });

                    await _bot.SendTextMessageAsync(
                        chatId: chatid,
                        text: $"Welcome! Click the button below to start mining, {_firstName}",
                        replyMarkup: inlineKeyboard,
                        cancellationToken: token);
                }
                else
                {
                    // Reply back to the user with their message prefixed
                    await _bot.SendTextMessageAsync(
                        chatId: chatid,
                        text: $"This is what you said: {text}",
                        cancellationToken: token);
                }
                Console.WriteLine($"{Username} |{chatid} | {text}, {_firstName}");
                await telegramServ.SignUpUser(users);
                StateHasChanged();




            }
        }
    }


    public async Task Submit()
    {
        //await http.PostAsync("https://localhost:7074", );

        // Create an instance of Update with the necessary data
        var update = new Update
            {
                // Populate the Update object as needed
                // For example:
                Message = new Message
                {
                    Text = "/start",
                    Chat = new Chat
                    {
                        Id = 12345678 // Replace with actual chat ID
                    }
                }
            };

            var serilize = JsonConvert.SerializeObject(update);
        // Send the POST request to your API
        var response = await http.PostAsJsonAsync("https://localhost:7074/api/bot/", serilize);
    }

}
