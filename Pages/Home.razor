@page "/"
@using System.Text
@using Telegram.Bot.Types.ReplyMarkups
@layout LayoutPage 
@inject ITelegramAuth telegramServ
@inject ILocalStorageService lStorage
@inject Tel_BotService botService
@inject HttpClient http
<PageTitle>Home</PageTitle>




<div class="page min-h-screen bg-gradient-to-br from-purple-600 to-blue-500 flex flex-col items-center justify-center p-0 sm:p-4 ">
    <div class="w-full h-full sm:h-auto sm:max-w-md bg-white bg-opacity-10 backdrop-blur-lg sm:rounded-2xl shadow-lg p-6 space-y-8 flex flex-col justify-between">
        <div>
            <h1 class="text-3xl font-bold text-center text-white mb-8">@FullName</h1>
            <Countdown />
        </div>

        <h3>Check Telegram Bot Updates</h3>

        <button @onclick="CheckForUpdates">Check for Updates</button>

        @if (responseMessage != null)
        {
            <p>@responseMessage</p>
        }
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-auto">
            @* Airdrop Info *@
            <div class=" bg-opacity-20 rounded-lg p-4 text-black h-full" style="background-color:#8990f5">
                <h2 class="text-xl font-semibold mb-2">Your Airdrop</h2>
                <p class="text-sm" >
                    You've mined <span class="font-bold text-yellow-300">1000 TLG</span> tokens in this airdrop!
                </p>
            </div>

            @* Points Display *@
            <div class=" bg-opacity-20 rounded-lg p-4 text-black h-full" style="background-color:#8990f5">
                <h2 class="text-xl font-semibold mb-2">Your Points</h2>
                <div class="text-3xl font-bold text-yellow-300">5,250</div>
                <p class="text-sm mt-1">Keep engaging to earn more points!</p>
            </div>
        </div>
    </div>
</div>


@* <img src="/images/dakcoin.jpg" /> *@




@code{
    private string _username;
    private string Storedusername;
    private string FullName;

    private string _userId;
    private string _firstName;


    private TelegramUser _user = new TelegramUser();
    private TelegramBotClient _bot = new TelegramBotClient("7324366764:AAE0FiQdBDSnHgZvnv2ZU3f5f9DAiGIMhx8");


    private string responseMessage;

    private async Task CheckForUpdates()
    {
        // Create a JSON object with the string you want to send
        var jsonContent = new StringContent("{\"command\":\"/start\"}", Encoding.UTF8, "application/json");
        try
        {
            var response = await http.PostAsync("https://omnix-app.onrender.com/api/bot", jsonContent); // Send an empty JSON object or relevant data
            if (response.IsSuccessStatusCode)
            {
                // Deserialize the response into an object
                var userInfo = await response.Content.ReadFromJsonAsync<TelegramUser>();

                // Create a new TelegramUser instance from the response
                var telegramUser = new TelegramUser
                    {
                        FirstName = userInfo.FirstName,
                        LastName = userInfo.LastName,
                        TelegramId = userInfo.TelegramId,
                        DateOfRegistration = DateTime.UtcNow // Set registration date as needed
                    };

                // Call SignUpUser with the new TelegramUser instance
                await telegramServ.SignInUser(telegramUser);
                responseMessage = "Checked for updates successfully!";
               
                //responseMessage = response.Content;
            }
            else
            {
               // responseMessage = "Failed to check for updates.";
                responseMessage = $"Failed to check for updates. Status Code: {response.StatusCode}, Reason: {response.ReasonPhrase}, Message: {response.RequestMessage}";
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"Error: {ex.Message}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await StartReceivingUpdates();

            var userId = await lStorage.GetItemAsStringAsync("telegramId");
            if (!string.IsNullOrWhiteSpace(userId))
            {

                var result = await telegramServ.GetUser(userId);
                if (result != null)
                {
                    FullName = $"{result.FirstName}, {result.LastName}";
                    _username = $"{result.Username}";
                    _userId = result.TelegramId;
                    StateHasChanged();
                }

            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        /*TelegramUser ddd = new TelegramUser
            {
                //Id = Guid.NewGuid(),
                TelegramId = "343534343",
                Username = "Dubem",
                FirstName = "Garya",
                LastName = "Hemry",
                DateOfRegistration = DateTime.UtcNow
            };
        await telegramServ.SignUpUser(ddd);*/
        /*using var cts = new CancellationTokenSource();
        var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = new UpdateType[]
                        {
                    UpdateType.Message,
                    UpdateType.EditedMessage,
                        }
            };*/
        //await StartReceivingUpdates();
        await CheckForUpdates();
    }

    private async Task StartReceivingUpdates()
    {
        using var cts = new CancellationTokenSource();
        var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = new UpdateType[]
                {
                UpdateType.Message,
                UpdateType.EditedMessage,
                }
            };
       

        // Start receiving updates
        _bot.StartReceiving(UpdataeHandler, ErrorHandler, receiverOptions, cancellationToken: cts.Token);
    }

    private async Task ErrorHandler(ITelegramBotClient client, Exception exception, CancellationToken token)
    {

    }

    private async Task UpdataeHandler(ITelegramBotClient client, Update update, CancellationToken token)
    {
        if (update.Type == UpdateType.Message)
        {
            if (update.Message.Type == MessageType.Text)
            {

                var text = update.Message.Text;
                var chatid = update.Message.Chat.Id;
                var Username = update.Message.From.Username;//Chat.Username;
                _firstName = update.Message.From.FirstName;
                var lastName = update.Message.Chat.LastName;
                var getId = update.Message.From.Id;


                TelegramUser users = new TelegramUser
                    {
                        //Id = (long)Guid.NewGuid().GetHashCode(),
                        TelegramId = getId.ToString(),
                        Username = Username,
                        FirstName = _firstName,
                        LastName = lastName
                    };
                await lStorage.SetItemAsStringAsync(getId.ToString(), "telegramId");

                if (text.Equals("/start", StringComparison.OrdinalIgnoreCase))
                {
                    // Create an inline keyboard button that redirects to your website
                    var inlineKeyboard = new InlineKeyboardMarkup(new[]
                    {
                    InlineKeyboardButton.WithUrl("Visit Our Website", "https://omnix-app.onrender.com/")
                });

                    await _bot.SendTextMessageAsync(
                        chatId: chatid,
                        text: $"Welcome! Click the button below to start mining, {_firstName}",
                        replyMarkup: inlineKeyboard,
                        cancellationToken: token);
                }
                else
                {
                    // Reply back to the user with their message prefixed
                    await _bot.SendTextMessageAsync(
                        chatId: chatid,
                        text: $"This is what you said: {text}",
                        cancellationToken: token);
                }
                Console.WriteLine($"{Username} |{chatid} | {text}, {_firstName}");
                await telegramServ.SignUpUser(users);
                StateHasChanged();




            }
        }
    }


    public async Task Submit()
    {
        //await http.PostAsync("https://localhost:7074", );

        // Create an instance of Update with the necessary data
        var update = new Update
            {
                // Populate the Update object as needed
                // For example:
                Message = new Message
                {
                    Text = "/start",
                    Chat = new Chat
                    {
                        Id = 12345678 // Replace with actual chat ID
                    }
                }
            };

            var serilize = JsonConvert.SerializeObject(update);
        // Send the POST request to your API
        var response = await http.PostAsJsonAsync("https://localhost:7074/api/bot/", serilize);
    }

}
